# -*- coding: utf-8 -*-
"""Test Reverse War.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18xvfN9AvqUnDgFC8RceBjZ2TYNfj--pU
"""

import ipywidgets as widgets
from IPython.display import display, clear_output
from collections import defaultdict

# ---------- UNITÉS DISPONIBLES ----------
unit_list = [
    "", "Archer", "Paladin", "Soldat", "Mage", "Dragon", "Erudit",
    "Garde Royale", "Ranger", "Nécromancien", "Porte Étendard",
    "Cartographe", "Guérisseur", "Golem", "Ménestrel", "Assassin"
]

# ---------- FORCE DE BASE ----------
base_force = {
    "Archer": 2, "Paladin": 4, "Soldat": 3, "Mage": 3, "Dragon": 10,
    "Erudit": 0, "Garde Royale": 5, "Ranger": 3, "Nécromancien": 6,
    "Porte Étendard": 0, "Cartographe": 6, "Guérisseur": 3,
    "Golem": 5, "Ménestrel": 0, "Assassin": 4
}

# ---------- FONCTIONS UTILES ----------
def get_adjacent(x, y):
    return [(x+dx, y+dy) for dx, dy in [(-1,0), (1,0), (0,-1), (0,1)] if 0 <= x+dx < 3 and 0 <= y+dy < 3]

def count_units(grid):
    counter = defaultdict(int)
    for row in grid:
        for unit in row:
            if unit:
                counter[unit] += 1
    return counter

def get_base_force(grid):
    return sum(base_force.get(unit, 0) for row in grid for unit in row if unit)

# ---------- CALCUL BONUS ----------
def get_bonus(grid, player_type):
    bonus = 0
    unit_counts = count_units(grid)

    for x in range(3):
        for y in range(3):
            unit = grid[x][y]
            if not unit:
                continue
            adj_units = [grid[i][j] for i, j in get_adjacent(x, y) if grid[i][j]]

            if unit == "Archer":
                if player_type == "Joueur":
                    bonus += 4 * adj_units.count("Archer")
                else:
                    bonus += 4 * (unit_counts["Archer"] - 1)

            elif unit == "Paladin":
                if player_type == "Joueur":
                    bonus += 3 * adj_units.count("Paladin")
                else:
                    bonus += 3 * (unit_counts["Paladin"] - 1)

            elif unit == "Soldat":
                if player_type == "Joueur":
                    bonus += 3 * (unit_counts["Soldat"] - 1)
                else:
                    bonus += 4 * (unit_counts["Soldat"] - 1)

            elif unit == "Mage":
                if player_type == "Joueur":
                    bonus += 2 * adj_units.count("Mage")
                else:
                    bonus += 2 * (unit_counts["Mage"] - 1)

            elif unit == "Dragon":
                if player_type == "Joueur":
                    if any(u in ["Mage", "Soldat", "Archer", "Paladin"] for u in adj_units):
                        bonus -= 5
                else:
                    if any(u in ["Mage", "Archer"] for u in adj_units):
                        bonus -= 4

            elif unit == "Erudit":
                types = ["Mage", "Guérisseur", "Nécromancien"]
                mult = 2 if player_type == "Joueur" else 3
                bonus += mult * sum(unit_counts[t] for t in types)

            elif unit == "Garde Royale":
                count_soldats = unit_counts["Soldat"]
                count_paladins = unit_counts["Paladin"]
                max_count = max(count_soldats, count_paladins)
                bonus += (2 if player_type == "Joueur" else 3) * max_count

            elif unit == "Ranger":
                types = ["Mage", "Archer"]
                mult = 2 if player_type == "Joueur" else 3
                bonus += mult * sum(unit_counts[t] for t in types)

            elif unit == "Guérisseur":
                for u in adj_units:
                    if u in base_force and base_force[u] <= 3:
                        bonus += 3 if player_type == "Joueur" else 4

            elif unit == "Golem":
                base_units = ["Archer", "Paladin", "Soldat", "Mage"]
                adj_count = sum(1 for u in adj_units if u in base_units)
                if player_type == "Joueur":
                    if adj_count == 2:
                        bonus += 5
                    elif adj_count == 0:
                        bonus -= 3
                else:
                    if adj_count >= 1:
                        bonus += 5

            elif unit == "Ménestrel":
                if player_type == "Joueur":
                    bonus += len(set(u for row in grid for u in row if u))
                else:
                    row_units = grid[x]
                    col_units = [grid[i][y] for i in range(3)]
                    bonus += 2 * len(set(row_units + col_units))

            elif unit == "Assassin":
                odd_count = sum(1 for u in adj_units if u in base_force and base_force[u] % 2 == 1)
                if player_type == "Joueur":
                    if odd_count == 2:
                        bonus += 4
                    elif odd_count >= 3:
                        bonus += 9
                else:
                    if odd_count == 1:
                        bonus += 4
                    elif odd_count >= 2:
                        bonus += 9

    return bonus

# ---------- INTERFACE ----------
joueur_widgets = [[widgets.Dropdown(options=unit_list, description=f"J{r}{c}") for c in range(3)] for r in range(3)]
ia_widgets = [[widgets.Dropdown(options=unit_list, description=f"IA{r}{c}") for c in range(3)] for r in range(3)]

calc_btn = widgets.Button(description="Calculer Score", button_style='success')
output = widgets.Output()

def on_calculate_clicked(_):
    with output:
        clear_output()
        joueur_grid = [[w.value for w in row] for row in joueur_widgets]
        ia_grid = [[w.value for w in row] for row in ia_widgets]

        joueur_total = get_base_force(joueur_grid) + get_bonus(joueur_grid, "Joueur")
        ia_total = get_base_force(ia_grid) + get_bonus(ia_grid, "IA")

        print("Grille Joueur :")
        for row in joueur_grid:
            print(row)
        print(f"Score Joueur : {joueur_total}\n")

        print("Grille IA :")
        for row in ia_grid:
            print(row)
        print(f"Score IA : {ia_total}")

calc_btn.on_click(on_calculate_clicked)

# ---------- AFFICHAGE FINAL ----------
print("Sélectionnez les unités pour chaque case (Joueur & IA) :\n")
display(widgets.HTML("<b>Grille du Joueur</b>"))
for row in joueur_widgets:
    display(widgets.HBox(row))

display(widgets.HTML("<br><b>Grille de l'IA</b>"))
for row in ia_widgets:
    display(widgets.HBox(row))

display(calc_btn, output)